name: Publish

on:
  push:
    tags:
      - v*

env:
  CREDENTIALS: ${{ secrets.CREDENTIALS }}

jobs:
  package:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        include:
          - name: 'macOS x64'
            os: macos-latest
            arch: x64
            cmake-extra-defs: '-DNOTARIZE=ON'

          - name: 'Linux x64 GCC'
            os: ubuntu-latest
            arch: x64
            cxx-compiler: g++
            c-compiler: gcc

          - name: 'Windows x86'
            os: windows-latest
            arch: x86
            cmake-extra-args: '-A Win32'
            cmake-extra-defs: '-DVCPKG_TARGET_TRIPLET=x86-windows-static'

          - name: 'Windows x64'
            os: windows-latest
            arch: x64
            cmake-extra-args: '-A x64'
            cmake-extra-defs: '-DVCPKG_TARGET_TRIPLET=x64-windows-static'

    env:
      CXX: ${{ matrix.cxx-compiler }}
      CC:  ${{ matrix.c-compiler }}
      BUILD_DIR: build
      CODE_SIGN_KEYCHAIN: '/Users/runner/Library/Keychains/codesign.keychain-db'
      CODE_SIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
      CODE_SIGN_MAC_INSTALLER_IDENTITY: ${{ secrets.CODESIGN_MAC_INSTALLER_IDENTITY }}
      APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
      APPLE_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: vcpkg-cache-${{ runner.os }}-${{ matrix.arch }}
        with:
          path: vcpkg
          key: ${{ env.cache-name }}-${{ hashFiles('InstallDeps.cmake') }}

      - name: Setup Developer ID Certificate
        if: ${{ startsWith(runner.os, 'macOS') }}
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain: 'codesign'
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_P12_PASSWORD }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: '3.18.x'

      - name: Use CMake
        run: cmake --version

      - name: Build dependencies
        run: cmake -DRELEASE_ONLY=ON -DCLEAN=ON -P InstallDeps.cmake

      - name: Create build environment
        run: cmake -E make_directory ${{ env.BUILD_DIR }}

      - name: Configure CMake
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          cmake ${{ matrix.cmake-extra-args }} $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=Release \
          -DCREDENTIALS=$CREDENTIALS \
          -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake \
          ${{ matrix.cmake-extra-defs }}

      - name: Package
        working-directory: ${{ env.BUILD_DIR }}
        shell: bash
        run: cmake --build . --config Release --target package

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: spotpl-${{ runner.os }}-${{ matrix.arch }}
          path: |
            packages/*.zip
            packages/*.pkg
  create-release:
    name: Create release
    needs: [package]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url  }}
    steps:
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: spotpl ${{ github.ref }}
          draft: true

  upload:
    name: Publish artifacts
    needs: [create-release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact: [spotpl-macOS-x64, spotpl-Linux-x64, spotpl-Windows-x86, spotpl-Windows-x64]
    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ matrix.artifact }}

      - name: Find package
        id: find_package
        run: |
          echo $(find spotpl*)
          echo "::set-output name=package_path::$(find spotpl*)"
        working-directory: ${{ steps.download.outputs.download-path }}

      - name: Package found
        run: |
          echo "Package: ${{ steps.find_package.outputs.package_path }}"

      - name: Upload Release Asset
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.find_package.outputs.package_path }}
